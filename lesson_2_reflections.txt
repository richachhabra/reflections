What happens when you initialize a repository? Why do you need to do it?

	When we initialize a repository, git creates a directory .git/ which stores
	the meta-data related to the repository such as history of the repository, 
	etc.
	Initialization of a repository is necessary because this initialization 
	converts a normal directory into a repository, allowing it to store 
	meta-data of the repository whichich is later useful for version control,
	selecting types of files to be stored,etc.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Working directory stores all the files and no meta-data for a project while
	the repository stores the meta-data as well as the files other than the
	ommitted ones. The staging area is different from both of these as it
	stores files to be stored in the repository only for a small period of 
	time. It just acts as an intermediary between the working directory and the
	repository in order to select the contents of a snapshop rather than 
	putting all the changes in a single snapshot.
	It is of great value as it allows the user to logically separate the 
	changes	made in the working directory by using add to select only the files
	containing the logically related changes in a single commit. 

How can you use the staging area to make sure you have one commit per logical
change?
qwertydgchjdskhgkhkll

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?