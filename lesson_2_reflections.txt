What happens when you initialize a repository? Why do you need to do it?

	When we initialize a repository, git creates a directory .git/ which stores
	the meta-data related to the repository such as history of the repository, 
	etc.
	Initialization of a repository is necessary because this initialization 
	converts a normal directory into a repository, allowing it to store 
	meta-data of the repository whichich is later useful for version control,
	selecting types of files to be stored,etc.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Working directory stores all the files and no meta-data for a project while
	the repository stores the meta-data as well as the files other than the
	ommitted ones. The staging area is different from both of these as it
	stores files to be stored in the repository only for a small period of 
	time. It just acts as an intermediary between the working directory and the
	repository in order to select the contents of a snapshop rather than 
	putting all the changes in a single snapshot.
	It is of great value as it allows the user to logically separate the 
	changes	made in the working directory by using add to select only the files
	containing the logically related changes in a single commit. 

How can you use the staging area to make sure you have one commit per logical
change?

	If we have made more than one logical changes in our working directory and 
	want one commit per logical change then we add only those files with that 
	logical change to the staging area, from where we can commit those changes 
	into the repository. Similarly we can do this for all the logical changes 
	separately. 
	
What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches would be useful in situations like:
		-experimenting new functionality so that the original code is available
		in case the experiment fails
	Branches would be helpfun in such situations as they would allow us to add 
	functionality to the original code by keeping the original code safe at the
	master branch and creating a new branch at that point and making a checkout
	at it so that if any changes are commited then it would expand this branch
	rather than the original master branch.

How do the diagrams help you visualize the branch structure?

	Diagrams help to visualize the parent of each commit in the form of a tree
	from different branches and to determine which commit belongs to which 
	branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	The result of merging two branches is that the changes made to the same 
	files are aggregated and stored together by comparing them with each other
	and the commit where these branches were created.
	We represent the diagram in such a way because the two branches are now 
	combined into a single commit though having two parents each directing to
	separate set of previous commits.

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?

	The pros of Git's automatic merging is that the author does not have to 
	burn his head to merge the contents of the different versions of files 
	though this might induce errors in the merged files as most of the times
	newly added lines are added to the merged files as well even if they might
	have some other form in the other versions of the same file.
	The pros for manual merge is that the cons of automatic merge don't occur
	here and the cons are that the author has to burn his head in merging the
	files which is very tideous.
